name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest
      BLUE_PORT: 3000
      GREEN_PORT: 3001

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build & Push Docker Image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Deploy to EC2 (Blue/Green)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            #!/bin/bash

            # 1. GitHub Secrets → 셸 변수에 할당
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            PROJECT_NAME="${{ secrets.PROJECT_NAME }}"
            COLOR="${{ secrets.COLOR }}"
            PORT="${{ secrets.PORT }}"
            
            SPRING_PROFILES_ACTIVE="${{ secrets.SPRING_PROFILES_ACTIVE }}"
            SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}"
            SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            
            DB_URL="${{ secrets.DB_URL }}"
            DB_USERNAME="${{ secrets.DB_USERNAME }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            
            JWT_ACCESS_HS512_SECRET="${{ secrets.JWT_ACCESS_HS512_SECRET }}"
            JWT_ACCESS_TOKEN_EXP="${{ secrets.JWT_ACCESS_TOKEN_EXP }}"
            JWT_REFRESH_HS512_SECRET="${{ secrets.JWT_REFRESH_HS512_SECRET }}"
            JWT_REFRESH_TOKEN_EXP="${{ secrets.JWT_REFRESH_TOKEN_EXP }}"
            
            # 현재 색상 확인 및 다음 배포 색상 결정
            COLOR_FILE="/var/www/current_color"
            if [ -f "$COLOR_FILE" ]; then
              CURRENT=$(cat "$COLOR_FILE")
            else
              CURRENT="green"
            fi
            
            if [ "$CURRENT" = "blue" ]; then
              COLOR="green"
              PORT=3001
            else
              COLOR="blue"
              PORT=3000
            fi
            
            echo "배포 대상: $COLOR ($PORT)"
            
            # 배포 디렉토리 이동
            DEPLOY_DIR="/app-$COLOR"
            sudo mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # docker-compose.yml 생성
            sudo tee docker-compose.yml > /dev/null <<EOF
            version: "3"
            services:
              app:
                image: ${IMAGE_NAME}
                container_name: ${PROJECT_NAME}-${COLOR}
                ports:
                  - "${PORT}:8080"
                restart: always
                environment:
                  SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
                  SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
                  SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
                  SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
                  DB_URL: ${DB_URL}
                  DB_USERNAME: ${DB_USERNAME}
                  DB_PASSWORD: ${DB_PASSWORD}
                  JWT_ACCESS_HS512_SECRET: ${JWT_ACCESS_HS512_SECRET}
                  JWT_ACCESS_TOKEN_EXP: ${JWT_ACCESS_TOKEN_EXP}
                  JWT_REFRESH_HS512_SECRET: ${JWT_REFRESH_HS512_SECRET}
                  JWT_REFRESH_TOKEN_EXP: ${JWT_REFRESH_TOKEN_EXP}
            EOF
            
            # 컨테이너 재시작
            docker-compose down || true
            docker-compose pull
            docker-compose up -d
            
            # 헬스 체크
            curl -f "http://localhost:${PORT}/actuator/health" || exit 1
            
            # nginx 리버스 프록시 설정 생성 또는 갱신
            sudo tee /etc/nginx/conf.d/app.conf > /dev/null <<EOF
            server {
              listen 80;
            
              location / {
                proxy_pass http://127.0.0.1:${PORT};
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              }
            }
            EOF
            
            # /var/www 디렉토리가 없을 수도 있으므로 생성
            sudo mkdir -p /var/www
            
            # 현재 색상 기록
            echo "$COLOR" | sudo tee "$COLOR_FILE"
            
            # nginx 재시작
            sudo systemctl reload nginx
            
            # 반대 색상 컨테이너 제거
            if [ "$COLOR" = "blue" ]; then
              docker rm -f ${PROJECT_NAME}-green || true
            else
              docker rm -f ${PROJECT_NAME}-blue || true
            fi
